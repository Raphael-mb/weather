{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","theKEY","App","state","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","id","components_Titles","components_Form","this","components_Weather","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0RASeA,EAPA,kBACdC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,uDCKaC,EARF,SAAAC,GAAK,OACjBL,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,EAAME,WAAYJ,UAAU,kBAC3CH,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,OAAOC,YAAY,iBAC3CV,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,UAAUC,YAAY,qBAC9CV,EAAAC,EAAAC,cAAA,0BCwBaS,EA5BC,SAAAN,GAAK,OACpBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbE,EAAMO,MAAQP,EAAMQ,SAAWb,EAAAC,EAAAC,cAAA,sBAC9BF,EAAAC,EAAAC,cAAA,gBAASG,EAAMO,KAAf,KAAyBP,EAAMQ,UAIhCR,EAAMS,aAAed,EAAAC,EAAAC,cAAA,yBACpBF,EAAAC,EAAAC,cAAA,gBAASG,EAAMS,YAAf,OAIDT,EAAMU,UAAYf,EAAAC,EAAAC,cAAA,sBACjBF,EAAAC,EAAAC,cAAA,gBAASG,EAAMU,SAAf,MAIDV,EAAMW,aAAehB,EAAAC,EAAAC,cAAA,wBACpBF,EAAAC,EAAAC,cAAA,gBAASG,EAAMW,YAAf,MAIDX,EAAMY,OAASjB,EAAAC,EAAAC,cAAA,SAAKG,EAAMY,SCjBvBC,SAAS,oCA8DAC,6MA3DbC,MAAQ,CACNN,YAAa,GACbF,KAAM,GACNC,QAAS,GACTE,SAAU,GACVC,YAAa,GACbC,MAAO,MAETV,iDAAa,SAAAc,EAAOC,GAAP,IAAAV,EAAAC,EAAAU,EAAAC,EAAA,OAAAC,EAAAxB,EAAAyB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEXP,EAAEQ,iBACIlB,EAAOU,EAAES,OAAOC,SAASpB,KAAKqB,MAC9BpB,EAAUS,EAAES,OAAOC,SAASnB,QAAQoB,MAJ/BN,EAAAE,KAAA,EAMYK,MAAK,oDAAAC,OAAqDvB,EAArD,KAAAuB,OAA6DtB,EAA7D,WAAAsB,OAA8EjB,EAA9E,kBANjB,cAMLK,EANKI,EAAAS,KAAAT,EAAAE,KAAA,EAQQN,EAASc,OARjB,OAQLb,EARKG,EAAAS,KASPxB,GAAQC,EACVyB,EAAKC,SAAS,CACZzB,YAAaU,EAAKgB,KAAKC,KACvB7B,KAAMY,EAAKf,KACXI,QAASW,EAAKkB,IAAI7B,QAClBE,SAAUS,EAAKgB,KAAKzB,SACpBC,YAAaQ,EAAKmB,QAAQ,GAAG3B,YAC7BC,MAAO,KAGTqB,EAAKC,SAAS,CACZzB,YAAa,GACbF,KAAM,GACNC,QAAS,GACTE,SAAU,GACVC,YAAa,GACbC,MAAO,4DAzBA,yBAAAU,EAAAiB,SAAAvB,oIA8BX,OACErB,EAAAC,EAAAC,cAAA,OAAK2C,GAAG,OACN7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAD,OAEF9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAD,CAAMxC,WAAYyC,KAAKzC,aACvBP,EAAAC,EAAAC,cAAC+C,EAAD,CACEnC,YAAakC,KAAK5B,MAAMN,YACxBC,SAAUiC,KAAK5B,MAAML,SACrBH,KAAMoC,KAAK5B,MAAMR,KACjBC,QAASmC,KAAK5B,MAAMP,QACpBG,YAAagC,KAAK5B,MAAMJ,YACxBC,MAAO+B,KAAK5B,MAAMH,iBApDZiC,IAAMC,WCAlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfwC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAvD,GACLqD,QAAQrD,MAAM,4CAA6CA,KCxEjEwD,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,WAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAxB,OAAM4C,WAAN,sBAEP3B,GAiDV,SAAiCO,GAE/BzB,MAAMyB,GACHI,KAAK,SAAAmB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,KAAK,SAAAC,GACjCA,EAAawB,aAAazB,KAAK,WAC7BT,OAAOC,SAASkC,aAKpB/B,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAmB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMxB,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCxCxBE","file":"static/js/main.5c04e728.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n\t<div>\r\n\t\t<h1 className=\"weatherHeading\">Weather App</h1>\r\n\t\t<p className=\"weatherHeading\">Enter values to get weather for a particular city</p>\r\n\t</div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.getWeather} className=\"weatherHeading\">\r\n\t\t<input type=\"text\" name=\"city\" placeholder=\"Enter City..\"/>\r\n\t\t<input type=\"text\" name=\"country\" placeholder=\"Enter Country...\"/>\r\n\t\t<button>Submit</button>\r\n\t</form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weatherHeading\">\r\n\t {\t\r\n\t \tprops.city && props.country && <p> Location: \r\n\t \t\t<span> { props.city }, { props.country }</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.temperature && <p> Temperature: \r\n\t \t\t<span> { props.temperature }\tC</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.humidity && <p> Humidity: \r\n\t \t\t<span> { props.humidity } </span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.description && <p> Conditions: \r\n\t \t\t<span> { props.description } </span>\r\n\t </p> \r\n\t }\r\n\t { \r\n\t \tprops.error && <p>{ props.error }</p>  \r\n\t }\r\n\t</div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport \"./style.css\";\n\n//Unique API Key\nconst theKEY = \"2e8da17003bdff69a7e3e0845bdc6b53\";\n\nclass App extends React.Component {\n  state = {\n    temperature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  }\n  getWeather = async (e) => {\n    \n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    //Api call below, we put in the city and country and provide the hard coded unique API key\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${theKEY}&units=metric`);\n    //JSON file returned and read\n    const data = await api_call.json();\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp, \n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description, \n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: \"\",\n        city: \"\",\n        country: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter both the city and country into the inputs.\"\n      });\n    }\n  }\n  render() {\n    return (\n      <div id=\"dis\"> \n        <div>\n          <Titles />\n        </div>\n        <div>\n          <Form getWeather={this.getWeather} />\n          <Weather \n            temperature={this.state.temperature} \n            humidity={this.state.humidity}\n            city={this.state.city}\n            country={this.state.country}\n            description={this.state.description}\n            error={this.state.error}\n          />\n        </div>      \n      </div>\n    );\n  }\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker();\n"],"sourceRoot":""}